dplyr::mutate(team = teams[i])
Sys.sleep(4)
# Empty data set for for-loop
all_links <- data.frame(html = character())
for(j in 1:nrow(players)){
# Player link url for scraping individual player pages
get_links <- read_html(url) %>%
html_nodes( paste0("tr:nth-child(", j,") a")) %>%
html_attr("href")
link <- data.frame(get_links[1]) %>%
dplyr::rename(html=1)
all_links <- rbind(all_links, link)
Sys.sleep(4)
}
# Column Bind player data and links
players <- cbind(players, all_links)
# Bind all players into one table
players_all <- rbind(players_all, players)
# Progress bar
print(paste0("Finished Team: ", teams[i]))
}
# Split player name into First & Last and update html path for scraping stats
players_list <- players_all %>%
dplyr::mutate(first = trim((lapply(strsplit(as.character(name), split = " "),"[",1))),
last = trim((lapply(strsplit(as.character(name), split = " "),"[",2))),
new_html = trim(gsub(".html", "", html))) %>%
dplyr::filter(!is.na(last))
players_to_sql <- players_list[,-c(3,6)] %>%
dplyr::mutate(year = 2023)
player <- players_list$name
list_of_teams <- players_list$team
# Create list for html path
path <- players_list$html
save.image("C:/scripts/Portfolio_Code/MLB Data Engineering/output/Player List.RData")
library(rvest)
library(dplyr)
library(rvest)
library(DBI)
library(odbc)
library(stringi)
library(RMySQL)
load("data/teams.RData")
load("data/player_key.RData")
load("data/players_list.RData")
stats_scrape <- function(type){
# Empty data frame for stats
final_df <- data.frame()
# Create URL of every player (path var comes from full player list scrape)
stats_url <- paste0("http://www.baseball-reference.com",path,"#all_",type,"_standard")
# This loop goes through each web page in the pitching stats url list. To prevent
# getting IP blocked, there is a 5 second sleep before each player and a 10 second
# sleep after each player. Not every player is listed so the loop is put into a
# try/except block. Repeated headers are filtered out as well as minor league
# season stats.
for(i in 1:nrow(players_list)){
tryCatch({
Sys.sleep(5)
# Scrape data from game logs
stats_df <- rvest::read_html(stats_url[i]) %>%
rvest::html_element(css = paste0("#",type,"_standard")) %>%
rvest::html_table(fill = T) %>%
dplyr::filter(nchar(Year) == 4,
Lg %in% c("MLB", "AL", "NL")) %>%
dplyr::mutate(path = path[i])
Sys.sleep(7)
# Combine all stats
final_df <- rbind(final_df, stats_df)
print(paste0("Finished with: ", players_list$name[i]))
}, error=function(e){cat(conditionMessage(e))})
}
return(final_df)
}
pitcher_stats <- stats_scrape("pitching")
pitcher_stats <- stats_scrape("pitching")
batter_stats <- stats_scrape("batting")
save.image("C:/scripts/Portfolio_Code/MLB Data Engineering/output/Player Stats.RData")
View(batter_stats)
View(pitcher_stats)
pitcher_stats %>%
dplyr::select(-awards) %>%
dplyr::mutate_at(-c(Tm, Lg), as.numeric)
pitcher_stats %>%
dplyr::select(-awards) %>%
dplyr::mutate_at(-c("Tm", "Lg"), as.numeric)
pitcher_stats %>%
dplyr::select(-awards) %>%
dplyr::mutate_at(c(-"Tm", -"Lg"), as.numeric)
pitcher_stats %>%
dplyr::select(-awards) %>%
dplyr::mutate_at(c(1,2,3:ncol(pitcher_stats)-1), as.numeric)
pitcher_stats %>%
dplyr::select(-Awards) %>%
dplyr::mutate_at(c(1,2,3:ncol(pitcher_stats)-1), as.numeric)
View(batter_stats)
batter_stats %>%
dplyr::select(-Awards, -Pos) %>%
dplyr::mutate_at(c(1,2,3:ncol(pitcher_stats)-1), as.numeric)
batter_stats %>%
dplyr::select(-Awards, -Pos) %>%
dplyr::mutate_at(c(1,2,5:ncol(pitcher_stats)-1), as.numeric)
pitcher_stats %>%
dplyr::select(-Awards) %>%
dplyr::mutate_at(c(1,2,5:ncol(pitcher_stats)-1), as.numeric)
pitcher_stats %>%
dplyr::mutate_at(c(1,2,5:ncol(pitcher_stats)-1), as.numeric) %>%
dplyr::select(-Awards)
pitcher_stats %>%
dplyr::mutate_at(c(1,2,6:ncol(pitcher_stats)-1), as.numeric) %>%
dplyr::select(-Awards)
batter_stats %>%
dplyr::mutate_at(c(1,2,5:ncol(pitcher_stats)-1), as.numeric) %>%
dplyr::select(-Awards, -Pos)
str(batter_stats)
batter_stats %>%
dplyr::mutate(Pos = NA) %>%
dplyr::mutate_at(c(1,2,5:ncol(pitcher_stats)-1), as.numeric) %>%
dplyr::select(-Awards, -Pos)
batter_stats %>%
#dplyr::mutate(Pos = NA) %>%
dplyr::mutate_at(c(1,2,5:ncol(batter_stats)-1), as.numeric) %>%
dplyr::select(-Awards, -Pos)
batter_stats %>%
#dplyr::mutate(Pos = NA) %>%
dplyr::mutate_at(c(1,2,6:ncol(batter_stats)-1), as.numeric) %>%
dplyr::select(-Awards, -Pos)
6:ncol(batter_stats)-1)
6:ncol(batter_stats)-1
final_pitcher_stats %>%
dplyr::mutate_at(c(1,2,6:ncol(pitcher_stats)-1), as.numeric) %>%
dplyr::select(-Awards)
final_pitcher_stats <- pitcher_stats %>%
dplyr::mutate_at(c(1,2,6:ncol(pitcher_stats)-1), as.numeric) %>%
dplyr::select(-Awards)
final_batter_stats <- batter_stats %>%
dplyr::mutate_at(c(1,2,6:ncol(batter_stats)-1), as.numeric) %>%
dplyr::select(-Awards, -Pos)
con <- dbConnect(RMySQL::MySQL(),
dbname = 'mlb_players',
host = '127.0.0.1',
port = 3306,
user = 'Austin',
password = key_get('local', 'Austin'))
library(DBI)
library(odbc)
library(RMySQL)
library(keyring)
con <- dbConnect(RMySQL::MySQL(),
dbname = 'mlb_players',
host = '127.0.0.1',
port = 3306,
user = 'Austin',
password = key_get('local', 'Austin'))
dbWriteTable(con, "pitcher_stats", final_pitcher_stats, append = T, row.names = F)
dbWriteTable(con, "batter_stats", final_batter_stats, append = T, row.names = F)
dbDisconnect(con)
load("C:/scripts/Portfolio_Code/MLB Data Engineering/output/Player List.RData")
View(players_list)
# Split player name into First & Last and update html path for scraping stats
players_list <- players_all %>%
dplyr::mutate(first = trim((lapply(strsplit(as.character(name), split = " "),"[",1))),
last = trim((lapply(strsplit(as.character(name), split = " "),"[",2))),
new_html = trim(gsub(".html", "", html)),
player_key = str_extract(html, "[a-z]*[0-9]{2}")) %>%
dplyr::filter(!is.na(last))
# Split player name into First & Last and update html path for scraping stats
players_list <- players_all %>%
dplyr::mutate(first = trim((lapply(strsplit(as.character(name), split = " "),"[",1))),
last = trim((lapply(strsplit(as.character(name), split = " "),"[",2))),
new_html = trim(gsub(".html", "", html)),
player_key = str_extract(html, "[a-z]*[0-9]{2}")) %>%
dplyr::filter(!is.na(last),
nchar(player_key > 3))
# Split player name into First & Last and update html path for scraping stats
players_list <- players_all %>%
dplyr::mutate(first = trim((lapply(strsplit(as.character(name), split = " "),"[",1))),
last = trim((lapply(strsplit(as.character(name), split = " "),"[",2))),
new_html = trim(gsub(".html", "", html)),
player_key = str_extract(html, "[a-z]*[0-9]{2}")) %>%
dplyr::filter(!is.na(last),
nchar(player_key) > 3)
players_to_sql <- players_list[,-c(3,6)] %>%
dplyr::mutate(year = 2023)
View(players_to_sql)
player <- players_list$name
list_of_teams <- players_list$team
# Create list for html path
path <- players_list$html
# Export variables to be used in other scripts
save(teams, file = "data/teams.RData")
save(path, file = "data/player_key.RData")
save(players_list, file = "data/players_list.RData")
# Write player list to sql
con <- dbConnect(RMySQL::MySQL(),
dbname = 'mlb',
host = key_get('Local_Host'),
port = 3306,
user = 'Austin',
password = key_get('local', 'Austin'))
dbWriteTable(con, "player_name", players_to_sql, append = T, row.names = F)
dbDisconnect(con)
con <- dbConnect(RMySQL::MySQL(),
dbname = 'mlb',
host = key_get('Local_Host'),
port = 3306,
user = 'Austin',
password = key_get('local', 'Austin'))
dbWriteTable(con, "player_list", players_to_sql, append = T, row.names = F)
dbDisconnect(con)
load("C:/scripts/Portfolio_Code/MLB Data Engineering/output/Player Stats.RData")
con <- dbConnect(RMySQL::MySQL(),
dbname = 'mlb',
host = key_get('Local_Host'),
port = 3306,
user = 'Austin',
password = key_get('local', 'Austin'))
dbWriteTable(con, "pitcher_stats", pitcher_stats, append = T, row.names = F)
dbWriteTable(con, "batter_stats", batter_stats, append = T, row.names = F)
dbDisconnect(con)
View(players_list)
rm(players_list)
load("data/players_list.RData")
View(players_list)
View(batter_stats)
pitcher_stats <- stats_scrape("pitching") %>%
dplyr::mutate_at(c(1,2,6:ncol(pitcher_stats)-1), as.numeric) %>%
dplyr::select(-Awards) %>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("html" = "path"))
View(pitcher_stats)
a <- pitcher_stats
View(a)
a <- pitcher_stats%>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("html" = "path"))
a <- pitcher_stats %>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("path" = "html"))
View(a)
library(rvest)
library(dplyr)
library(rvest)
library(DBI)
library(odbc)
library(stringi)
library(RMySQL)
library(keyring)
load("data/teams.RData")
load("data/player_key.RData")
load("data/players_list.RData")
stats_scrape <- function(type){
# Empty data frame for stats
final_df <- data.frame()
# Create URL of every player (path var comes from full player list scrape)
stats_url <- paste0("http://www.baseball-reference.com",path,"#all_",type,"_standard")
# This loop goes through each web page in the pitching stats url list. To prevent
# getting IP blocked, there is a 5 second sleep before each player and a 10 second
# sleep after each player. Not every player is listed so the loop is put into a
# try/except block. Repeated headers are filtered out as well as minor league
# season stats.
for(i in 1:nrow(players_list)){
tryCatch({
Sys.sleep(5)
# Scrape data from game logs
stats_df <- rvest::read_html(stats_url[i]) %>%
rvest::html_element(css = paste0("#",type,"_standard")) %>%
rvest::html_table(fill = T) %>%
dplyr::filter(nchar(Year) == 4,
Lg %in% c("MLB", "AL", "NL")) %>%
dplyr::mutate(path = path[i])
Sys.sleep(7)
# Combine all stats
final_df <- rbind(final_df, stats_df)
print(paste0("Finished with: ", players_list$name[i]))
}, error=function(e){cat(conditionMessage(e))})
}
return(final_df)
}
pitcher_stats <- stats_scrape("pitching") %>%
dplyr::mutate_at(c(1,2,6:ncol(pitcher_stats)-1), as.numeric) %>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("html" = "path")) %>%
dplyr::select(-Awards, -html)
pitcher_stats <- stats_scrape("pitching")
type="pitching"
# Empty data frame for stats
final_df <- data.frame()
# Create URL of every player (path var comes from full player list scrape)
stats_url <- paste0("http://www.baseball-reference.com",path,"#all_",type,"_standard")
# This loop goes through each web page in the pitching stats url list. To prevent
# getting IP blocked, there is a 5 second sleep before each player and a 10 second
# sleep after each player. Not every player is listed so the loop is put into a
# try/except block. Repeated headers are filtered out as well as minor league
# season stats.
for(i in 1:2){
tryCatch({
Sys.sleep(5)
# Scrape data from game logs
stats_df <- rvest::read_html(stats_url[i]) %>%
rvest::html_element(css = paste0("#",type,"_standard")) %>%
rvest::html_table(fill = T) %>%
dplyr::filter(nchar(Year) == 4,
Lg %in% c("MLB", "AL", "NL")) %>%
dplyr::mutate(path = path[i])
Sys.sleep(7)
# Combine all stats
final_df <- rbind(final_df, stats_df)
print(paste0("Finished with: ", players_list$name[i]))
}, error=function(e){cat(conditionMessage(e))})
}
View(final_df)
type="batting"
# Empty data frame for stats
final_df <- data.frame()
# Create URL of every player (path var comes from full player list scrape)
stats_url <- paste0("http://www.baseball-reference.com",path,"#all_",type,"_standard")
# This loop goes through each web page in the pitching stats url list. To prevent
# getting IP blocked, there is a 5 second sleep before each player and a 10 second
# sleep after each player. Not every player is listed so the loop is put into a
# try/except block. Repeated headers are filtered out as well as minor league
# season stats.
for(i in 1:2){
tryCatch({
Sys.sleep(5)
# Scrape data from game logs
stats_df <- rvest::read_html(stats_url[i]) %>%
rvest::html_element(css = paste0("#",type,"_standard")) %>%
rvest::html_table(fill = T) %>%
dplyr::filter(nchar(Year) == 4,
Lg %in% c("MLB", "AL", "NL")) %>%
dplyr::mutate(path = path[i])
Sys.sleep(7)
# Combine all stats
final_df <- rbind(final_df, stats_df)
print(paste0("Finished with: ", players_list$name[i]))
}, error=function(e){cat(conditionMessage(e))})
}
# This loop goes through each web page in the pitching stats url list. To prevent
# getting IP blocked, there is a 5 second sleep before each player and a 10 second
# sleep after each player. Not every player is listed so the loop is put into a
# try/except block. Repeated headers are filtered out as well as minor league
# season stats.
for(i in 1:10){
tryCatch({
Sys.sleep(5)
# Scrape data from game logs
stats_df <- rvest::read_html(stats_url[i]) %>%
rvest::html_element(css = paste0("#",type,"_standard")) %>%
rvest::html_table(fill = T) %>%
dplyr::filter(nchar(Year) == 4,
Lg %in% c("MLB", "AL", "NL")) %>%
dplyr::mutate(path = path[i])
Sys.sleep(7)
# Combine all stats
final_df <- rbind(final_df, stats_df)
print(paste0("Finished with: ", players_list$name[i]))
}, error=function(e){cat(conditionMessage(e))})
}
View(players_list)
i=34
# Scrape data from game logs
stats_df <- rvest::read_html(stats_url[i]) %>%
rvest::html_element(css = paste0("#",type,"_standard")) %>%
rvest::html_table(fill = T) %>%
dplyr::filter(nchar(Year) == 4,
Lg %in% c("MLB", "AL", "NL")) %>%
dplyr::mutate(path = path[i])
View(stats_df)
################################################################################################
# This scripts scrapes batting and pitching stats for MLB players from the
# `Player List.R` script. The main function loops through each web page in
# the relevant stat url list. To prevent getting IP blocked, there is a 5
# second sleep before each player and a 10 second sleep after each player.
# Not every player is listed so the loop is put into a try/except block.
# Repeated headers are filtered out as well as minor league season stats.
################################################################################################
library(rvest)
library(dplyr)
library(rvest)
library(DBI)
library(odbc)
library(stringi)
library(RMySQL)
library(keyring)
load("data/teams.RData")
load("data/player_key.RData")
load("data/players_list.RData")
stats_scrape <- function(type){
# Empty data frame for stats
final_df <- data.frame()
# Create URL of every player (path var comes from full player list scrape)
stats_url <- paste0("http://www.baseball-reference.com",path,"#all_",type,"_standard")
# This loop goes through each web page in the pitching stats url list. To prevent
# getting IP blocked, there is a 5 second sleep before each player and a 10 second
# sleep after each player. Not every player is listed so the loop is put into a
# try/except block. Repeated headers are filtered out as well as minor league
# season stats.
for(i in 1:nrow(players_list)){
tryCatch({
Sys.sleep(5)
# Scrape data from game logs
stats_df <- rvest::read_html(stats_url[i]) %>%
rvest::html_element(css = paste0("#",type,"_standard")) %>%
rvest::html_table(fill = T) %>%
dplyr::filter(nchar(Year) == 4,
Lg %in% c("MLB", "AL", "NL")) %>%
dplyr::mutate(path = path[i])
Sys.sleep(7)
# Combine all stats
final_df <- rbind(final_df, stats_df)
print(paste0("Finished with: ", players_list$name[i]))
}, error=function(e){cat(conditionMessage(e))})
}
return(final_df)
}
pitcher_stats <- stats_scrape("pitching") %>%
dplyr::mutate_at(c(1,2,6:35), as.numeric) %>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("html" = "path")) %>%
dplyr::select(-Awards, -html)
pitcher_stats <- stats_scrape("pitching") %>%
dplyr::mutate_at(c(1,2,6:35), as.numeric)
ps <- pitcher_stats %>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("path" = "html")) %>%
dplyr::select(-Awards, -html)
View(pitcher_stats)
View(players_list)
ps <- pitcher_stats %>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("path" = "html"))
View(ps)
ps <- pitcher_stats %>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("path" = "html")) %>%
dplyr::select(-Awards)
pitcher_stats <- pitcher_stats %>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("path" = "html")) %>%
dplyr::select(-Awards)
rm(ps)
batter_stats <- stats_scrape("batting") %>%
dplyr::mutate_at(c(1,2,6:28), as.numeric) %>%
dplyr::inner_join(players_list[,c("name", "html", "player_key")],
by = c("path" = "html")) %>%
dplyr::select(-Awards, -Pos)
save.image("C:/scripts/Portfolio_Code/MLB Data Engineering/output/Player Stats.RData")
View(batter_stats)
con <- dbConnect(RMySQL::MySQL(),
dbname = 'mlb',
host = key_get('Local_Host'),
port = 3306,
user = 'Austin',
password = key_get('local', 'Austin'))
dbWriteTable(con, "pitcher_stats", pitcher_stats, append = T, row.names = F)
dbWriteTable(con, "batter_stats", batter_stats, append = T, row.names = F)
dbDisconnect(con)
library(rvest)
library(dplyr)
library(DBI)
library(odbc)
library(stringr)
library(RMySQL)
# List of all teams using the abbreviation used on the attendance page.
# Notable changes are LAA to ANA and TBR to TBD.
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "ANA", "LAD", "FLA",
"MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SFG", "SEA", "STL", "TBD", "TEX", "TOR", "WSN")
# Empty data set for for-loop
teams_all <- data.frame(name = character(),
team = character())
# This loops through each team abbreviation and pulls the variables
# listed in the description above. `Lg` is broken out into
# league and division and `Stadium` only pulls the first  stadium
# listed. This is where most games were played and excludes
# stadiums were international or promotional games were played.
for(i in 1:length(teams)){
# Website to scrape
url <- paste0("http://www.baseball-reference.com/teams/",teams[i],"/attend.shtml")
# Read in the URL, rename the Player column and add the team name
team_status <- rvest::read_html(url) %>%
rvest::html_nodes("#franchise_years") %>%
rvest::html_table() %>%
.[[1]] %>%
dplyr::select(-c(`Attend/G`, Rank, PPF, BPF)) %>%
dplyr::rename_with(tolower) %>%
dplyr::rename(team = tm,
payroll = `est. payroll`,
win = w,
loss = l) %>%
dplyr::mutate(attendance = as.numeric(stringr::str_replace_all(attendance, ",", "")),
payroll = as.numeric(stringr::str_replace_all(payroll, c("\\$" = "", "," = ""))),
# Extracts the first entry up to a comma
stadium = stringr::str_extract(stadium, "^([^,]+)"),
# Changes any playoff result that's blank to "Missed Playoffs"
playoffs = stringr::str_replace_all(playoffs, "^$", "Missed Playoffs"),
league = stringr::str_sub(lg, 1, 2),
division = stringr::str_sub(lg, 4)) %>%
dplyr::select(-lg)
Sys.sleep(4)
teams_all <- rbind(teams_all, team_status)
# Progress bar
print(paste0("Finished Team: ", teams[i]))
}
# Write player list to sql
con <- dbConnect(RMySQL::MySQL(),
dbname = 'mlb',
host = key_get('Local_Host'),
port = 3306,
user = 'Austin',
password = key_get('local', 'Austin'))
dbWriteTable(con, "team_records", teams_all, append = T, row.names = F)
dbDisconnect(con)
save.image("C:/scripts/Portfolio_Code/MLB Data Engineering/output/Teams.RData")
